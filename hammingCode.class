import java.io.*;

/**
 * Class for computing Hamming codes.
 */
public class HammingCoder {
    /**
     * Function that computes the Hamming code for a 16-bit word.
     *
     * @param inWord Array that contains the bits of the input word, each one represented
     *               as an integer number.
     * @return An array that contains the bits of the input word and the Hamming code
     * bits; each bit is represented as an integer number.
     */
    static int[] computeHammingCode(int[] inWord) {

        int logOf2ThePowerOfX = (int) (Math.log(inWord.length) / Math.log(2.0));  //calculate number of parity bits needed
       int twoToThePowerOfX = (int) Math.pow(2, logOf2ThePowerOfX);
        int[] myArray = new int[inWord.length + logOf2ThePowerOfX];
        int inWordIndexPosition = 0;

        //////////////////Creating myarray///////////////////////////////////
        for (int i = 0; i < logOf2ThePowerOfX; i++) {

            double powerOfTwo = Math.pow(2, i);

            if (i < 2) {
                myArray[i] = 3;
            } else {
                myArray[(int) powerOfTwo - 1] = 3;
            }
        }

        //////////////////Here copying the inWord array into myarray/////////////////////
        for (int i = 0; i < myArray.length; i++) {

            if (myArray[i] != 3) { //so ... if it has not a reserved spot by 3.
                myArray[i] = inWord[inWordIndexPosition++]; //copy the inWord index value to my array index position

            }
        }

        ///////////////////Calculating the hamming code/////////////////////////////////

        int cycles = 0;
        while (cycles < logOf2ThePowerOfX) {
            int odd = 0;
            double powerOfTwo = Math.pow(2, cycles);
            for (int i = 1; i < myArray.length; i *= 2) {

                if (myArray[i] != 0 && myArray[i] != 3) {
                    odd++;
                }

            }

            if (odd % 2 == 0) {
                myArray[(int) powerOfTwo - 1] = 0;
            } else {
                myArray[(int) powerOfTwo - 1] = 1;
            }
            cycles++;
        }

        ///////////////////////////////////////////////////////////////////////////////////

        for (int i = 0; i < myArray.length; i++) {
            System.out.print(myArray[i]);
        }


        return myArray;

    }

    /**
     * This function counts the number of bits in the provided line.
     */
    static int getWordLength(String line) {

        return line.length();
    }

    /**
     * Estimates the total length of a coded word, given the length of its non-coded version.
     * For instance, for a non-coded word of 16 bits, which requires 5 Hamming code bits, the
     * total length returned by this function is 21.
     */
    static int getCodeLength(int wordLength) {

        int logOf2ThePowerOfX = (int) (Math.log(wordLength) / Math.log(2.0));
        int codeLength = (int) Math.pow(2, logOf2ThePowerOfX);


        return codeLength;
    }

    public static void main(String args[]) {
        int i;

        if (args.length != 2) {
            System.out.println("Usage: java HammingCoder <input_file> <output_file>");
            System.exit(1);
        }

        try {
            BufferedReader reader = new BufferedReader(new FileReader(args[0]));
            PrintWriter writer = new PrintWriter(new FileWriter(args[1]));

            // process the input file, line by line
            String line;
            while ((line = reader.readLine()) != null) {

                /** Get the length of the input word */
                int wordLength = getWordLength(line);

                /** Estimate the length of the output word (Hamming code bits + data bits). */
                int codeLength = getCodeLength(wordLength);

                int[] inWord = new int[wordLength];
                //transform each character of the string into the corresponding int (0 or 1)
                for (i = 0; i < wordLength; i++) {
                    inWord[i] = (int) (line.charAt(i) - 48);
                }

                // compute the Hamming code
                int[] outWord = computeHammingCode(inWord);

                // print the result into the output file
                for (i = 0; i < codeLength; i++) {
                    writer.print(outWord[i]);
                }
                writer.println();
            }

            reader.close();
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}
